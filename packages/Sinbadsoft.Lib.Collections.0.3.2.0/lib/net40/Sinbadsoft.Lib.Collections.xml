<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sinbadsoft.Lib.Collections</name>
    </assembly>
    <members>
        <member name="T:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4">
            <summary>
            Base abstract class for reversible dictionaries. This base implementation uses
            two dictionaries for key->value and value->key maps.
            </summary>
            <typeparam name="TKey"> The type of the keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <typeparam name="TDictImpl"> The implementation type of 
            <c>(<typeparamref name="TKey"/>, <typeparamref name="TValue"/>)</c> map.</typeparam>
            <typeparam name="TDictImplRev"> The implementation type of 
            <c>(<typeparamref name="TValue"/>, <typeparamref name="TKey"/>)</c> map.</typeparam>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key"> The object to use as the key of the element to add.</param>
            <param name="value"> The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary> Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>. </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns> Returns <see langword="true"/> if <paramref name="item"/> is found in the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="item"> The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns> Returns <see langword="true"/> if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an 
            element with the provided key; otherwise, <see langword="false"/>.
            </returns>
            <param name="key"> The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> 
            that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. 
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional -or- arrayIndex is equal 
            to or greater than the length of array.-or-The number of elements in the source 
            <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from arrayIndex to the end 
            of the destination array.-or-Type T cannot be cast automatically to the type of the destination 
            array.</exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.GetEnumerator">
            <summary> Returns an enumerator that iterates through the collection. </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            Returns <see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>. 
            This method also returns <see langword="false"/> if key was not found in the original 
            <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key"> The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException"> The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"> The key is <see langword="null"/>.</exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns> Returns <see langword="true"/> if item was successfully removed from the 
            <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. This method also returns 
            <see langword="false"/> if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item"> The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException"> The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get the element associated with a key.
            </summary>
            <param name="key"> The key of the element to look for. </param>
            <param name="value">Will be set to the element with key <paramref name="key"/> if any; otherwise it will
            be set to <see langword="default"/>(<typeparamref name="TKey"/>).</param>
            <returns> Returns <see langword="true"/> if an element with key <paramref name="key"/> is found;
            otherwise <see langword="false"/>. </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add. </param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add. </param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the 
            <see cref="T:System.Collections.IDictionary"/> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is <see langword="null"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"/> is read-only has a fixed size.
            </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IDictionary#Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"/> object is read-only. </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"/> object contains an element with the specified key.
            </summary>
            <returns> Returns <see langword="true"/> if the <see cref="T:System.Collections.IDictionary"/> contains an element with the 
            provided key; otherwise, <see langword="false"/>.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/> object.</param>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="key"/> is <see langword="null"/>. 
            </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"></see>, starting at a 
            particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="arr">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements 
            copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"></see> must have zero-based indexing. 
            </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="arr"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the
            length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the 
            available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast 
            automatically to the type of the destination array. </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> object for the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IEnumerable#GetEnumerator">
            <summary> Returns an enumerator that iterates through a collection. </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <param name="key">The key of the element to remove. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"/> object is read-only or 
            has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.InvokeDeserializationCallback(System.Object,System.Object)">
            <summary>
            Invokes deserialization callback <see cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)"/>
            for objects implementing the <see cref="T:System.Runtime.Serialization.IDeserializationCallback"/> interface.
            </summary>
            <param name="elt"> The object being deserilazed. </param>
            <param name="sender"> The sender to use as argument for deserialisation callback. </param>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.TryDeserializeValue``1(System.String,``0@,System.Object)">
            <summary>
            Extracts the element with the provided name form <see cref="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.SInfo"/>.
            </summary>
            <typeparam name="T"> The type of the element to extract from <see cref="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.SInfo"/>. </typeparam>
            <param name="name"> The name of the element to extract form <see cref="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.SInfo"/>. </param>
            <param name="elt"> Will be set to the element with name <paramref name="name"/> in <see cref="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.SInfo"/>
            if found; otherwise it will be set to <see langword="default"/>(<typeparamref name="T"/>). </param>
            <param name="sender"> The sender object to forward to 
            <see cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)"/>. </param>
            <returns> Returns <see langword="true"/> if the element is found; otherwise <see langword="false"/>. </returns>
            <remarks> 
            If the deserialized element implements <see cref="T:System.Runtime.Serialization.IDeserializationCallback"/>,
            its deserialization callback <see cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)"/> will be invoked.
            </remarks>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"/> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.IsReadOnly">
            <summary> Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </summary>
            <returns> <see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, <see langword="false"/>. </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            <see langword="true"/> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that 
            implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>. 
            </summary>
            <returns> An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>. </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IDictionary#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/> object is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"/> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"/> object containing the keys of the <see cref="T:System.Collections.IDictionary"/> object.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.Item(`0)">
            <summary> Gets or sets the element with the specified key. </summary>
            <returns> The element with the specified key. </returns>
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key is not found.</exception>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.AbstractReversibleDictionary`4.System#Collections#IDictionary#Item(System.Object)">
            <summary> Gets or sets the element with the specified key. </summary>
            <returns> The element with the specified key. </returns>
            <param name="key">The key of the element to get or set. </param>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary"/> object is read-only.-or- The property is set, key does not exist in the collection, and the <see cref="T:System.Collections.IDictionary"/> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is <see langword="null"/>. </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.IndexesHelper.Add(System.Int32[],System.Int32[])">
            <summary>
            Creates a new array with values equal to those of <paramref name="a1"/> plus <paramref name="a2"/>.
            </summary>
            <param name="a1"> The left operand.</param>
            <param name="a2"> The right operand.</param>
            <returns> A new array containing the result.</returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.IndexesHelper.Substract(System.Int32[],System.Int32[])">
            <summary>
            Creates a new array with values equal to those of 
            <paramref name="a1"/> minus <paramref name="a2"/>.
            </summary>
            <param name="a1"> The left operand.</param>
            <param name="a2"> The right operand.</param>
            <returns> A new array containing the result.</returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.IndexesHelper.Add(System.Int32[],System.Int32)">
            <summary> Creates a new array with values equal to those of <paramref name="arr"/> plus <paramref name="scalar"/>.</summary>
            <param name="arr"> The source array.</param>
            <param name="scalar"> The scalar value to add.</param>
            <returns> A new array containing the result.</returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.IndexesHelper.Multiply(System.Int32[],System.Int32)">
            <summary> 
            Creates a new array with values equal to those of <paramref name="arr"/> multiplied by <paramref name="scalar"/>. 
            </summary>
            <param name="arr"> The source array.</param>
            <param name="scalar"> The scalar value to multiply by.</param>
            <returns> A new array containing the result.</returns>
        </member>
        <member name="T:Sinbadsoft.Lib.Collections.DynamicArray`1">
            <summary> Dynamic Multidimensional Array. </summary>
            <typeparam name="T"> The type of the keys in the array. </typeparam>
        </member>
        <member name="F:Sinbadsoft.Lib.Collections.DynamicArray`1.DEFAULTCAPACITY">
            <summary> The default capacity of the underlying buffer. </summary>
        </member>
        <member name="F:Sinbadsoft.Lib.Collections.DynamicArray`1.counts">
            <summary> The array counts of each dimension. </summary>
        </member>
        <member name="F:Sinbadsoft.Lib.Collections.DynamicArray`1.buffer">
            <summary> The underlying buffer array. </summary>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.#ctor(System.Int32,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> class. If a capcity is omitted the 
            <see cref="F:Sinbadsoft.Lib.Collections.DynamicArray`1.DEFAULTCAPACITY"/> is used for the missing dimension capacity.
            </summary>
            <param name="rank"> The dynamic array rank. </param>
            <param name="capacities"> The capacities to be used for the underlying buffer. </param>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.op_Explicit(Sinbadsoft.Lib.Collections.DynamicArray{`0})~`0[]">
            <summary>
            Converts a <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to a system array of a given dimension.
            </summary>
            <param name="darr"> The <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to convert.</param>
            <returns> A one dimensional array holding all the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> elements. </returns>
            <remarks> This is convenient operator. The implementation performs a cast of 
            <see cref="M:Sinbadsoft.Lib.Collections.DynamicArray`1.ToArray"/> to the desired array type.</remarks>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.op_Explicit(Sinbadsoft.Lib.Collections.DynamicArray{`0})~`0[0:,0:]">
            <summary>
            Converts a <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to a system array of a given dimension.
            </summary>
            <param name="darr"> The <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to convert.</param>
            <returns> A two dimensional array holding all the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> elements. </returns>
            <remarks> This is convenient operator. The implementation performs a cast of 
            <see cref="M:Sinbadsoft.Lib.Collections.DynamicArray`1.ToArray"/> to the desired array type.</remarks>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.op_Explicit(Sinbadsoft.Lib.Collections.DynamicArray{`0})~`0[0:,0:,0:]">
            <summary>
            Converts a <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to a system array of a given dimension.
            </summary>
            <param name="darr"> The <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to convert.</param>
            <returns> A three dimensional array holding all the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> elements. </returns>
            <remarks> This is convenient operator. The implementation performs a cast of 
            <see cref="M:Sinbadsoft.Lib.Collections.DynamicArray`1.ToArray"/> to the desired array type.</remarks>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.op_Explicit(Sinbadsoft.Lib.Collections.DynamicArray{`0})~`0[0:,0:,0:,0:]">
            <summary>
            Converts a <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to a system array of a given dimension.
            </summary>
            <param name="darr"> The <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to convert.</param>
            <returns> A four dimensional array holding all the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> elements. </returns>
            <remarks> This is convenient operator. The implementation performs a cast of 
            <see cref="M:Sinbadsoft.Lib.Collections.DynamicArray`1.ToArray"/> to the desired array type.</remarks>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.op_Explicit(Sinbadsoft.Lib.Collections.DynamicArray{`0})~System.Array">
            <summary>
            Converts a <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to <see cref="T:System.Array"/>.
            </summary>
            <param name="darr"> The <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to convert.</param>
            <returns> An <see cref="T:System.Array"/> holding all the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> elements. </returns>
            <remarks> This is convenient operator. The implementation performs a cast of 
            <see cref="M:Sinbadsoft.Lib.Collections.DynamicArray`1.ToArray"/> to <see cref="T:System.Array"/>.</remarks>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.Clear">
            <summary>
            Sets a range of elements in the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to zero, to <see langword="false"/> 
            or to <see langword="null"/>, depending on <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> contains a specific value. Complexity is <em>O(n)</em>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>. </param>
            <returns> Returns <see langword="true"/> if <paramref name="item"/> is found in the 
            <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.CopyTo(Sinbadsoft.Lib.Collections.DynamicArray{`0},System.Int32[])">
            <summary> Strongly typed implementation of <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>. </summary>
            <param name="darray"> The <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> where to copy the values. </param>
            <param name="indexes">The zero-based indexes offset in darray at which copying begins. </param>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.Extend(System.Int32[])">
            <summary> 
            Resizes the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> by adding each ith given value to the corresponding ith dimension.
            </summary>
            <param name="addedCounts"> The amounts to add to each dimension count. </param>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.ExtendDim(System.Int32,System.Int32)">
            <summary>
            Resizes the given dimension of the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> by adding the given value to its 
            corresponding count.
            </summary>
            <param name="dimension"> The <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> dimension to enlarge.</param>
            <param name="addedCount"> The value to add to the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> 
            <paramref name="dimension"/>'s count.</param>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.GetCapacity(System.Int32)">
            <summary> Gets the capacity of the given dimension. </summary>
            <param name="dimension"> The dimension of which the capcity is returned.</param>
            <returns> The <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> <paramref name="dimension"/>'s capacity. </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.GetCount(System.Int32)">
            <summary> Gets the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> count for the given dimension. </summary>
            <param name="dimension"> One of the a <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>'s dimensions. </param>
            <returns> The given dimension length. </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.GetEnumerator">
            <summary>
            Gets a <see cref="T:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1"/> that iterates through the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>.
            </summary>
            <returns> A <see cref="T:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1"/> enumerator object that can be used to iterate through 
            the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>. </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.GetValue(System.Int32[])">
            <summary>
            Gets the value at the specified position in the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>. The indexes are specified 
            as an array of integers.
            </summary>
            <param name="indexes"> A one-dimensional array of integers that represent the indexes of the element 
            to get. </param>
            <returns> The value at the specified position in the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>. </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.Insert(System.Array,System.Int32,System.Int32[])">
            <summary> 
            Inserts the given <see cref="T:System.Array"/> within the given dimension and at the given position. 
            </summary>
            <param name="arr"> An array to insert in the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>. 
            It must be not <see langword="null"/> and it must have a rank equal to <see cref="P:Sinbadsoft.Lib.Collections.DynamicArray`1.Rank"/>.
            </param>
            <param name="dimension"> The dimension where the elements of the <paramref name="arr"/> will be inserted.
            </param>
            <param name="indexes"> The position where the first element of the <paramref name="arr"/> will be inserted.
            </param>
            <exception cref="T:System.RankException"> If <paramref name="arr"/> has a rank not equal to 
            <see cref="P:Sinbadsoft.Lib.Collections.DynamicArray`1.Rank"/>.</exception>
            <exception cref="T:System.ArgumentException"> If <paramref name="arr"/> has one of its lengths equal to zero. 
            </exception>
            <exception cref="T:System.NullReferenceException"> If arr is <see langword="null"/></exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.Resize(System.Int32[])">
            <summary> Resizes the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to the given new counts. </summary>
            <param name="newCounts"> The new lengths of the <see ref="DynamicArray{T}"/>. </param>
            <remarks> If the <paramref name="newCounts"/> ith element is larger than the ith count, the new added 
            elements are set to <c>default(<typeparamref name="T"/>)</c>. If <paramref name="newCounts"/> ith element
            is less then the ith count, the <see ref="DynamicArray{T}"/> is shrank to fit to the new count value,
            and the removed elements will be lost. </remarks>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.ResizeDim(System.Int32,System.Int32)">
            <summary> Resizes the given dimension to the given new count. </summary>
            <param name="dimension"> The <see ref="DynamicArray{T}"/>'s dimension to resize. </param>
            <param name="newCount"> The new length of the <see ref="DynamicArray{T}"/>'s dimension 
            <paramref name="dimension"/>. </param>
            <remarks> If the given <paramref name="newCount"/> is larger than the current count, the new added elements 
            are set to <c>default(<typeparamref name="T"/>)</c>. If <paramref name="newCount"/> is less then the current
            count, the <see ref="DynamicArray{T}"/> is shrank to fit to the new count value, and the removed elements 
            will be lost. </remarks>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.SetValue(`0,System.Int32[])">
            <summary>
            Sets the value at the specified position in the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>. The indexes are specified as 
            an array of integers.
            </summary>
            <param name="value"> The new value to set at the specified position in the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>. 
            </param>
            <param name="indexes"> A one-dimensional array of integers that represent the indexes of the element to set. 
            </param>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> to a new array with rank 
            <see cref="P:Sinbadsoft.Lib.Collections.DynamicArray`1.Rank"/> and with lengthes equal to <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> counts.
            </summary>
            <returns> An array containing copies of the elements of the<see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/>. </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArray`1.UpdateCountsAndCapacities(System.Int32[])">
            <summary>
            Ensures the given indexes falls into the lengths and capacities of the underlying array. If not, the 
            capacities and lengths are updated accordingly. A new underlyting array may be allocated in order to adapt
            capacities.
            </summary>
            <param name="indexes"> The indexes that must fall within the array. </param>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.DynamicArray`1.Count">
            <summary> Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>. </summary>
            <returns> The number of elements contained in the <see cref="T:System.Collections.ICollection"/>. </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.DynamicArray`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> 
            is synchronized (thread safe).
            </summary>
            <returns>
            <see langword="true"/> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.DynamicArray`1.Rank">
            <summary> Gets the number of dimensions. </summary>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.DynamicArray`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns> An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>. </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.DynamicArray`1.ChangeCount">
            <summary> Gets fail fast counter for enumerator invalidation. </summary>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.DynamicArray`1.Counts">
            <summary> Gets a copy of the <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> dimensions' counts. </summary>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.DynamicArray`1.Item(System.Int32[])">
            <summary> Gets or sets the value associated with the specified indexes. </summary>
            <param name="indexes">The position where to get or set the element.</param>
        </member>
        <member name="T:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1">
            <summary> Enumerator for <see cref="T:Sinbadsoft.Lib.Collections.DynamicArray`1"/> classes. </summary>
            <typeparam name="T"> The type of the elements of the dynamic array. </typeparam>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1.Dispose">
            <summary> 
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1.GetEnumerator">
            <summary> Returns an enumerator that iterates through the collection. </summary>
            <returns> A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1.GetIndexes">
            <summary> Returns the current indexes position. </summary>
            <returns> The indexes position of the next element.</returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1.MoveNext">
            <summary> Advances the enumerator to the next element of the collection. </summary>
            <returns> Returns <see langword="true"/> if the enumerator was successfully advanced to the next element; 
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1.Reset">
            <summary> 
            Sets the enumerator to its initial position, which is before the first element in the collection. 
            </summary>
            <exception cref="T:System.InvalidOperationException"> The collection was modified after the enumerator was created. 
            </exception>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary> Returns an enumerator that iterates through a collection. </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection. 
            </returns>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1.Dispose(System.Boolean)">
            <summary> Implements the dispose pattern. </summary>
            <param name="disposing"> Indicates if the object is being disposed. </param>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1.Current">
            <summary> Gets the element in the collection at the current position of the enumerator. </summary>
            <returns> The element in the collection at the current position of the enumerator. </returns>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.DynamicArrayEnumerator`1.System#Collections#IEnumerator#Current">
            <summary> Gets the current element in the collection. </summary>
            <returns> The current element in the collection. </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the 
            collection or after the last element. </exception>
        </member>
        <member name="T:Sinbadsoft.Lib.Collections.IReversibleDictionary`2">
            <summary> Generic reversible dictionary. </summary>
            <typeparam name="TKey"> Type of the key elements. </typeparam>
            <typeparam name="TValue"> Type of the value elements. </typeparam>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.IReversibleDictionary`2.Reverse">
            <summary> Gets the reverse dictionary. </summary>
        </member>
        <member name="T:Sinbadsoft.Lib.Collections.IReversibleDictionary">
            <summary> Reversible dictionary. </summary>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.IReversibleDictionary.Reverse">
            <summary> Gets the reverse dictionary. </summary>
        </member>
        <member name="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2">
            <summary> 
            Implementation of IReversibleDictionary based on <see cref="T:System.Collections.Generic.Dictionary`2"/>. 
            </summary>
            <typeparam name="TKey"> The type of the keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <remarks>
            <list type="bullet">
            <item>
            Retrieving a value by using its key is very fast, close to O(1), as this implementation is based on a 
            <see cref="T:System.Collections.Generic.Dictionary`2"/> which is implemented as a hash table.
            </item>
            <item>
            As for <see cref="T:System.Collections.Generic.Dictionary`2"/>, The speed of retrieval depends on the quality of the hashing 
            algorithm of the types <em>TKey</em> and <em>TValue</em>.
            </item>
            <item>
            As long as an object is used as a key ot value in the <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/>, 
            it must not change in any way that affects its hash value. Every key and value in a <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/>
            must be unique according to the dictionary's equality comparers. A key or a value cannot be <see langword="null"/>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.ReversibleDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.ReversibleDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/> class.
            The <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/> will be initialized with the key and value pairs 
            contained in <paramref name="data"/>.
            </summary>
            <param name="data"> Contains the key and value pairs for the 
            <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/> intialization. </param>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.ReversibleDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/> class that
            uses the provided <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <typeparamref name="TKey"/> and 
            <typeparamref name="TValue"/>. The <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/> will be initialized
            with the key and value pairs contained in <paramref name="data"/>.
            </summary>
            <param name="data"> Contains the key and value pairs for the 
            <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/> intialization. </param>
            <param name="keyComparer"> The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing 
            keys, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type
            of the key.
            </param>
            <param name="valueComparer"> The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing 
            values, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type
            of the values.</param>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.ReversibleDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Sinbadsoft.Lib.Collections.ReversibleDictionary`2"/> class that
            uses the provided <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <typeparamref name="TKey"/> and 
            <typeparamref name="TValue"/>.
            </summary>
            <param name="keyComparer"> The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing 
            keys, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type
            of the key.
            </param>
            <param name="valueComparer"> The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing 
            values, or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type
            of the values.</param>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.ReversibleDictionary`2.Reverse">
            <summary> Gets the reverse dictionary. </summary>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.ReversibleDictionary`2.Sinbadsoft#Lib#Collections#IReversibleDictionary#Reverse">
            <summary> Gets the reverse dictionary. </summary>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.ReversibleDictionary`2.Sinbadsoft#Lib#Collections#IReversibleDictionary{TKey@TValue}#Reverse">
            <summary> Gets the reverse dictionary. </summary>
        </member>
        <member name="T:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2">
            <summary> 
            Implementation of IReversibleDictionary based on <see cref="T:System.Collections.Generic.SortedDictionary`2"/>. 
            </summary>
            <typeparam name="TKey"> The type of the keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2"/> class.
            The <see cref="T:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2"/> will be initialized with the key and value pairs
            contained in <paramref name="data"/>.
            </summary>
            <param name="data"> Contains the key and value pairs for the 
            <see cref="T:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2"/> intialization. </param>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2.Reverse">
            <summary> Gets the reverse dictionary. </summary>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2.Sinbadsoft#Lib#Collections#IReversibleDictionary#Reverse">
            <summary> Gets the reverse dictionary. </summary>
        </member>
        <member name="P:Sinbadsoft.Lib.Collections.SortedReversibleDictionary`2.Sinbadsoft#Lib#Collections#IReversibleDictionary{TKey@TValue}#Reverse">
            <summary> Gets the reverse dictionary. </summary>
        </member>
    </members>
</doc>
